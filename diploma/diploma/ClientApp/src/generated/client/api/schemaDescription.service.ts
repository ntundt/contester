/**
 * diploma
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CreateSchemaDescriptionCommand } from '../model/createSchemaDescriptionCommand';
import { CreateSchemaDescriptionFileCommand } from '../model/createSchemaDescriptionFileCommand';
import { GetSchemaDescriptionFilesQueryResult } from '../model/getSchemaDescriptionFilesQueryResult';
import { GetSchemaDescriptionsQueryResult } from '../model/getSchemaDescriptionsQueryResult';
import { SchemaDescriptionDto } from '../model/schemaDescriptionDto';
import { SchemaDescriptionFileDto } from '../model/schemaDescriptionFileDto';
import { UpdateSchemaDescriptionCommand } from '../model/updateSchemaDescriptionCommand';
import { UpdateSchemaDescriptionFileCommand } from '../model/updateSchemaDescriptionFileCommand';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SchemaDescriptionService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param sieveModelFilters 
     * @param sieveModelSorts 
     * @param sieveModelPage 
     * @param sieveModelPageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiSchemaDescriptionsGet(sieveModelFilters?: string, sieveModelSorts?: string, sieveModelPage?: number, sieveModelPageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<GetSchemaDescriptionsQueryResult>;
    public apiSchemaDescriptionsGet(sieveModelFilters?: string, sieveModelSorts?: string, sieveModelPage?: number, sieveModelPageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetSchemaDescriptionsQueryResult>>;
    public apiSchemaDescriptionsGet(sieveModelFilters?: string, sieveModelSorts?: string, sieveModelPage?: number, sieveModelPageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetSchemaDescriptionsQueryResult>>;
    public apiSchemaDescriptionsGet(sieveModelFilters?: string, sieveModelSorts?: string, sieveModelPage?: number, sieveModelPageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sieveModelFilters !== undefined && sieveModelFilters !== null) {
            queryParameters = queryParameters.set('SieveModel.Filters', <any>sieveModelFilters);
        }
        if (sieveModelSorts !== undefined && sieveModelSorts !== null) {
            queryParameters = queryParameters.set('SieveModel.Sorts', <any>sieveModelSorts);
        }
        if (sieveModelPage !== undefined && sieveModelPage !== null) {
            queryParameters = queryParameters.set('SieveModel.Page', <any>sieveModelPage);
        }
        if (sieveModelPageSize !== undefined && sieveModelPageSize !== null) {
            queryParameters = queryParameters.set('SieveModel.PageSize', <any>sieveModelPageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetSchemaDescriptionsQueryResult>('get',`${this.basePath}/api/schema-descriptions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiSchemaDescriptionsPost(body?: CreateSchemaDescriptionCommand, observe?: 'body', reportProgress?: boolean): Observable<SchemaDescriptionDto>;
    public apiSchemaDescriptionsPost(body?: CreateSchemaDescriptionCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SchemaDescriptionDto>>;
    public apiSchemaDescriptionsPost(body?: CreateSchemaDescriptionCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SchemaDescriptionDto>>;
    public apiSchemaDescriptionsPost(body?: CreateSchemaDescriptionCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<SchemaDescriptionDto>('post',`${this.basePath}/api/schema-descriptions`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param schemaDescriptionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiSchemaDescriptionsSchemaDescriptionIdDelete(schemaDescriptionId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiSchemaDescriptionsSchemaDescriptionIdDelete(schemaDescriptionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiSchemaDescriptionsSchemaDescriptionIdDelete(schemaDescriptionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiSchemaDescriptionsSchemaDescriptionIdDelete(schemaDescriptionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (schemaDescriptionId === null || schemaDescriptionId === undefined) {
            throw new Error('Required parameter schemaDescriptionId was null or undefined when calling apiSchemaDescriptionsSchemaDescriptionIdDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/schema-descriptions/${encodeURIComponent(String(schemaDescriptionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param schemaDescriptionId 
     * @param dbms 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiSchemaDescriptionsSchemaDescriptionIdFilesDbmsDelete(schemaDescriptionId: string, dbms: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiSchemaDescriptionsSchemaDescriptionIdFilesDbmsDelete(schemaDescriptionId: string, dbms: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiSchemaDescriptionsSchemaDescriptionIdFilesDbmsDelete(schemaDescriptionId: string, dbms: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiSchemaDescriptionsSchemaDescriptionIdFilesDbmsDelete(schemaDescriptionId: string, dbms: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (schemaDescriptionId === null || schemaDescriptionId === undefined) {
            throw new Error('Required parameter schemaDescriptionId was null or undefined when calling apiSchemaDescriptionsSchemaDescriptionIdFilesDbmsDelete.');
        }

        if (dbms === null || dbms === undefined) {
            throw new Error('Required parameter dbms was null or undefined when calling apiSchemaDescriptionsSchemaDescriptionIdFilesDbmsDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/schema-descriptions/${encodeURIComponent(String(schemaDescriptionId))}/files/${encodeURIComponent(String(dbms))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param schemaDescriptionId 
     * @param dbms 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiSchemaDescriptionsSchemaDescriptionIdFilesDbmsPut(schemaDescriptionId: string, dbms: string, body?: UpdateSchemaDescriptionFileCommand, observe?: 'body', reportProgress?: boolean): Observable<SchemaDescriptionFileDto>;
    public apiSchemaDescriptionsSchemaDescriptionIdFilesDbmsPut(schemaDescriptionId: string, dbms: string, body?: UpdateSchemaDescriptionFileCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SchemaDescriptionFileDto>>;
    public apiSchemaDescriptionsSchemaDescriptionIdFilesDbmsPut(schemaDescriptionId: string, dbms: string, body?: UpdateSchemaDescriptionFileCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SchemaDescriptionFileDto>>;
    public apiSchemaDescriptionsSchemaDescriptionIdFilesDbmsPut(schemaDescriptionId: string, dbms: string, body?: UpdateSchemaDescriptionFileCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (schemaDescriptionId === null || schemaDescriptionId === undefined) {
            throw new Error('Required parameter schemaDescriptionId was null or undefined when calling apiSchemaDescriptionsSchemaDescriptionIdFilesDbmsPut.');
        }

        if (dbms === null || dbms === undefined) {
            throw new Error('Required parameter dbms was null or undefined when calling apiSchemaDescriptionsSchemaDescriptionIdFilesDbmsPut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<SchemaDescriptionFileDto>('put',`${this.basePath}/api/schema-descriptions/${encodeURIComponent(String(schemaDescriptionId))}/files/${encodeURIComponent(String(dbms))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param schemaDescriptionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiSchemaDescriptionsSchemaDescriptionIdFilesGet(schemaDescriptionId: string, observe?: 'body', reportProgress?: boolean): Observable<GetSchemaDescriptionFilesQueryResult>;
    public apiSchemaDescriptionsSchemaDescriptionIdFilesGet(schemaDescriptionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetSchemaDescriptionFilesQueryResult>>;
    public apiSchemaDescriptionsSchemaDescriptionIdFilesGet(schemaDescriptionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetSchemaDescriptionFilesQueryResult>>;
    public apiSchemaDescriptionsSchemaDescriptionIdFilesGet(schemaDescriptionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (schemaDescriptionId === null || schemaDescriptionId === undefined) {
            throw new Error('Required parameter schemaDescriptionId was null or undefined when calling apiSchemaDescriptionsSchemaDescriptionIdFilesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetSchemaDescriptionFilesQueryResult>('get',`${this.basePath}/api/schema-descriptions/${encodeURIComponent(String(schemaDescriptionId))}/files`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param schemaDescriptionId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiSchemaDescriptionsSchemaDescriptionIdFilesPost(schemaDescriptionId: string, body?: CreateSchemaDescriptionFileCommand, observe?: 'body', reportProgress?: boolean): Observable<SchemaDescriptionFileDto>;
    public apiSchemaDescriptionsSchemaDescriptionIdFilesPost(schemaDescriptionId: string, body?: CreateSchemaDescriptionFileCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SchemaDescriptionFileDto>>;
    public apiSchemaDescriptionsSchemaDescriptionIdFilesPost(schemaDescriptionId: string, body?: CreateSchemaDescriptionFileCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SchemaDescriptionFileDto>>;
    public apiSchemaDescriptionsSchemaDescriptionIdFilesPost(schemaDescriptionId: string, body?: CreateSchemaDescriptionFileCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (schemaDescriptionId === null || schemaDescriptionId === undefined) {
            throw new Error('Required parameter schemaDescriptionId was null or undefined when calling apiSchemaDescriptionsSchemaDescriptionIdFilesPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<SchemaDescriptionFileDto>('post',`${this.basePath}/api/schema-descriptions/${encodeURIComponent(String(schemaDescriptionId))}/files`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param schemaDescriptionId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiSchemaDescriptionsSchemaDescriptionIdPut(schemaDescriptionId: string, body?: UpdateSchemaDescriptionCommand, observe?: 'body', reportProgress?: boolean): Observable<SchemaDescriptionDto>;
    public apiSchemaDescriptionsSchemaDescriptionIdPut(schemaDescriptionId: string, body?: UpdateSchemaDescriptionCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SchemaDescriptionDto>>;
    public apiSchemaDescriptionsSchemaDescriptionIdPut(schemaDescriptionId: string, body?: UpdateSchemaDescriptionCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SchemaDescriptionDto>>;
    public apiSchemaDescriptionsSchemaDescriptionIdPut(schemaDescriptionId: string, body?: UpdateSchemaDescriptionCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (schemaDescriptionId === null || schemaDescriptionId === undefined) {
            throw new Error('Required parameter schemaDescriptionId was null or undefined when calling apiSchemaDescriptionsSchemaDescriptionIdPut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<SchemaDescriptionDto>('put',`${this.basePath}/api/schema-descriptions/${encodeURIComponent(String(schemaDescriptionId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

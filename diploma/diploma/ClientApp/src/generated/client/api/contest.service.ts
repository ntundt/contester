/**
 * diploma
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AddContestParticipantCommand } from '../model/addContestParticipantCommand';
import { ContestDto } from '../model/contestDto';
import { CreateContestCommand } from '../model/createContestCommand';
import { GetContestParticipantsQueryResult } from '../model/getContestParticipantsQueryResult';
import { GetContestsQueryResult } from '../model/getContestsQueryResult';
import { UpdateContestCommand } from '../model/updateContestCommand';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ContestService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param contestId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiContestsContestIdParticipantsGet(contestId: string, observe?: 'body', reportProgress?: boolean): Observable<GetContestParticipantsQueryResult>;
    public apiContestsContestIdParticipantsGet(contestId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetContestParticipantsQueryResult>>;
    public apiContestsContestIdParticipantsGet(contestId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetContestParticipantsQueryResult>>;
    public apiContestsContestIdParticipantsGet(contestId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (contestId === null || contestId === undefined) {
            throw new Error('Required parameter contestId was null or undefined when calling apiContestsContestIdParticipantsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetContestParticipantsQueryResult>('get',`${this.basePath}/api/contests/${encodeURIComponent(String(contestId))}/participants`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param contestId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiContestsContestIdParticipantsPost(contestId: string, body?: AddContestParticipantCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiContestsContestIdParticipantsPost(contestId: string, body?: AddContestParticipantCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiContestsContestIdParticipantsPost(contestId: string, body?: AddContestParticipantCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiContestsContestIdParticipantsPost(contestId: string, body?: AddContestParticipantCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (contestId === null || contestId === undefined) {
            throw new Error('Required parameter contestId was null or undefined when calling apiContestsContestIdParticipantsPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/contests/${encodeURIComponent(String(contestId))}/participants`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param contestId 
     * @param userId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiContestsContestIdParticipantsUserIdDelete(contestId: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiContestsContestIdParticipantsUserIdDelete(contestId: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiContestsContestIdParticipantsUserIdDelete(contestId: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiContestsContestIdParticipantsUserIdDelete(contestId: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (contestId === null || contestId === undefined) {
            throw new Error('Required parameter contestId was null or undefined when calling apiContestsContestIdParticipantsUserIdDelete.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling apiContestsContestIdParticipantsUserIdDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/contests/${encodeURIComponent(String(contestId))}/participants/${encodeURIComponent(String(userId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param contestId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiContestsContestIdPut(contestId: string, body?: UpdateContestCommand, observe?: 'body', reportProgress?: boolean): Observable<ContestDto>;
    public apiContestsContestIdPut(contestId: string, body?: UpdateContestCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContestDto>>;
    public apiContestsContestIdPut(contestId: string, body?: UpdateContestCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContestDto>>;
    public apiContestsContestIdPut(contestId: string, body?: UpdateContestCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (contestId === null || contestId === undefined) {
            throw new Error('Required parameter contestId was null or undefined when calling apiContestsContestIdPut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ContestDto>('put',`${this.basePath}/api/contests/${encodeURIComponent(String(contestId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param userId 
     * @param sieveFilters 
     * @param sieveSorts 
     * @param sievePage 
     * @param sievePageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiContestsGet(userId?: string, sieveFilters?: string, sieveSorts?: string, sievePage?: number, sievePageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<GetContestsQueryResult>;
    public apiContestsGet(userId?: string, sieveFilters?: string, sieveSorts?: string, sievePage?: number, sievePageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetContestsQueryResult>>;
    public apiContestsGet(userId?: string, sieveFilters?: string, sieveSorts?: string, sievePage?: number, sievePageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetContestsQueryResult>>;
    public apiContestsGet(userId?: string, sieveFilters?: string, sieveSorts?: string, sievePage?: number, sievePageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('UserId', <any>userId);
        }
        if (sieveFilters !== undefined && sieveFilters !== null) {
            queryParameters = queryParameters.set('Sieve.Filters', <any>sieveFilters);
        }
        if (sieveSorts !== undefined && sieveSorts !== null) {
            queryParameters = queryParameters.set('Sieve.Sorts', <any>sieveSorts);
        }
        if (sievePage !== undefined && sievePage !== null) {
            queryParameters = queryParameters.set('Sieve.Page', <any>sievePage);
        }
        if (sievePageSize !== undefined && sievePageSize !== null) {
            queryParameters = queryParameters.set('Sieve.PageSize', <any>sievePageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetContestsQueryResult>('get',`${this.basePath}/api/contests`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiContestsPost(body?: CreateContestCommand, observe?: 'body', reportProgress?: boolean): Observable<ContestDto>;
    public apiContestsPost(body?: CreateContestCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContestDto>>;
    public apiContestsPost(body?: CreateContestCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContestDto>>;
    public apiContestsPost(body?: CreateContestCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ContestDto>('post',`${this.basePath}/api/contests`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

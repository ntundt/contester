// <auto-generated />
using System;
using contester.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace contester.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250614165700_AddConnectionStrings")]
    partial class AddConnectionStrings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContestCommissionMembers", b =>
                {
                    b.Property<Guid>("CommissionMembersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.HasKey("CommissionMembersId", "ContestId");

                    b.HasIndex("ContestId");

                    b.ToTable("ContestCommissionMembers");
                });

            modelBuilder.Entity("ContestParticipants", b =>
                {
                    b.Property<Guid>("ContestsUserParticipatesInId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantsId")
                        .HasColumnType("uuid");

                    b.HasKey("ContestsUserParticipatesInId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("ContestParticipants");
                });

            modelBuilder.Entity("PermissionUserRole", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserRolesId")
                        .HasColumnType("integer");

                    b.HasKey("PermissionsId", "UserRolesId");

                    b.HasIndex("UserRolesId");

                    b.ToTable("PermissionUserRole");

                    b.HasData(
                        new
                        {
                            PermissionsId = 1,
                            UserRolesId = 1
                        },
                        new
                        {
                            PermissionsId = 2,
                            UserRolesId = 1
                        },
                        new
                        {
                            PermissionsId = 3,
                            UserRolesId = 1
                        },
                        new
                        {
                            PermissionsId = 4,
                            UserRolesId = 1
                        },
                        new
                        {
                            PermissionsId = 5,
                            UserRolesId = 1
                        });
                });

            modelBuilder.Entity("contester.Data.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AuditEntries");
                });

            modelBuilder.Entity("contester.Features.ApplicationSettings.ConnectionString", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Dbms")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("ConnectionStrings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dbms = "Oracle",
                            Text = "Data Source=oracle_db:1521/xe;User Id=SQL_CONTEST_USER;Password=Password123;"
                        },
                        new
                        {
                            Id = 2,
                            Dbms = "Postgres",
                            Text = "Server=postgres_db;Port=5432;Database=sql_contest;User Id=sql_contest_user;Password=Password123;"
                        },
                        new
                        {
                            Id = 3,
                            Dbms = "SqlServer",
                            Text = "Server=sql_server_db;Database=SQL_CONTEST;User Id=SQL_CONTEST_USER;Password=Password123;"
                        });
                });

            modelBuilder.Entity("contester.Features.AttachedFiles.AttachedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("AttachedFiles");
                });

            modelBuilder.Entity("contester.Features.Attempts.Attempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Dbms")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("OriginalAttemptId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Originality")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid");

                    b.Property<string>("SolutionPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("OriginalAttemptId");

                    b.HasIndex("ProblemId");

                    b.ToTable("Attempts");
                });

            modelBuilder.Entity("contester.Features.Authentication.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ManageContests"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ManageProblems"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ManageAttempts"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ManageContestParticipants"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ManageSchemaDescriptions"
                        });
                });

            modelBuilder.Entity("contester.Features.Authentication.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("contester.Features.ContestApplications.ContestApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("UserId");

                    b.ToTable("ContestApplications");
                });

            modelBuilder.Entity("contester.Features.Contests.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("contester.Features.Grade.GradeAdjustment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttemptId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttemptId");

                    b.HasIndex("UserId");

                    b.ToTable("GradeAdjustments");
                });

            modelBuilder.Entity("contester.Features.Problems.Problem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CaseSensitive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("FloatMaxDelta")
                        .HasColumnType("numeric");

                    b.Property<int>("MaxGrade")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("OrderMatters")
                        .HasColumnType("boolean");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<Guid>("SchemaDescriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SolutionDbms")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SolutionPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StatementPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<TimeSpan>("TimeLimit")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("SchemaDescriptionId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("contester.Features.SchemaDescriptions.SchemaDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("SchemaDescriptions");
                });

            modelBuilder.Entity("contester.Features.SchemaDescriptions.SchemaDescriptionFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Dbms")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<bool>("HasProblems")
                        .HasColumnType("boolean");

                    b.Property<string>("Problems")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("SchemaDescriptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SchemaDescriptionId");

                    b.ToTable("SchemaDescriptionFiles");
                });

            modelBuilder.Entity("contester.Features.Scoreboard.ScoreboardApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApprovingUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApprovingUserId");

                    b.HasIndex("ContestId");

                    b.ToTable("ScoreboardApprovals");
                });

            modelBuilder.Entity("contester.Features.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmailConfirmationCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("EmailConfirmationCodeExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmailConfirmationToken")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EmailConfirmationTokenExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PasswordRecoveryToken")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PasswordRecoveryTokenExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a47a812-35f4-4c70-a44e-bd3ff2d00cda"),
                            AdditionalInfo = "",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@contest.er",
                            EmailConfirmationCode = "",
                            EmailConfirmationCodeExpiresAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmationToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmationTokenExpiresAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Admin",
                            IsEmailConfirmed = true,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "",
                            PasswordHash = "AQAAAAIAAYagAAAAECSwhwNjcv03U++cZncRbILGDZFSTCG9fcsrQOZlEurwvK7DNfndYRo9t604WZ9+cg==",
                            PasswordRecoveryToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            PasswordRecoveryTokenExpiresAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserRoleId = 1
                        });
                });

            modelBuilder.Entity("ContestCommissionMembers", b =>
                {
                    b.HasOne("contester.Features.Users.User", null)
                        .WithMany()
                        .HasForeignKey("CommissionMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("contester.Features.Contests.Contest", null)
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContestParticipants", b =>
                {
                    b.HasOne("contester.Features.Contests.Contest", null)
                        .WithMany()
                        .HasForeignKey("ContestsUserParticipatesInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("contester.Features.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionUserRole", b =>
                {
                    b.HasOne("contester.Features.Authentication.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("contester.Features.Authentication.UserRole", null)
                        .WithMany()
                        .HasForeignKey("UserRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("contester.Features.AttachedFiles.AttachedFile", b =>
                {
                    b.HasOne("contester.Features.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("contester.Features.Attempts.Attempt", b =>
                {
                    b.HasOne("contester.Features.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("contester.Features.Attempts.Attempt", "OriginalAttempt")
                        .WithMany()
                        .HasForeignKey("OriginalAttemptId");

                    b.HasOne("contester.Features.Problems.Problem", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("OriginalAttempt");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("contester.Features.ContestApplications.ContestApplication", b =>
                {
                    b.HasOne("contester.Features.Contests.Contest", "Contest")
                        .WithMany("ContestApplications")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("contester.Features.Users.User", "User")
                        .WithMany("ContestApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("contester.Features.Contests.Contest", b =>
                {
                    b.HasOne("contester.Features.Users.User", "Author")
                        .WithMany("AuthoredContests")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("contester.Features.Grade.GradeAdjustment", b =>
                {
                    b.HasOne("contester.Features.Attempts.Attempt", "Attempt")
                        .WithMany()
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("contester.Features.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("contester.Features.Problems.Problem", b =>
                {
                    b.HasOne("contester.Features.Contests.Contest", "Contest")
                        .WithMany("Problems")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("contester.Features.SchemaDescriptions.SchemaDescription", "SchemaDescription")
                        .WithMany()
                        .HasForeignKey("SchemaDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("SchemaDescription");
                });

            modelBuilder.Entity("contester.Features.SchemaDescriptions.SchemaDescription", b =>
                {
                    b.HasOne("contester.Features.Contests.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId");

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("contester.Features.SchemaDescriptions.SchemaDescriptionFile", b =>
                {
                    b.HasOne("contester.Features.SchemaDescriptions.SchemaDescription", "SchemaDescription")
                        .WithMany("Files")
                        .HasForeignKey("SchemaDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchemaDescription");
                });

            modelBuilder.Entity("contester.Features.Scoreboard.ScoreboardApproval", b =>
                {
                    b.HasOne("contester.Features.Users.User", "ApprovingUser")
                        .WithMany()
                        .HasForeignKey("ApprovingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("contester.Features.Contests.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovingUser");

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("contester.Features.Users.User", b =>
                {
                    b.HasOne("contester.Features.Authentication.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("contester.Features.Contests.Contest", b =>
                {
                    b.Navigation("ContestApplications");

                    b.Navigation("Problems");
                });

            modelBuilder.Entity("contester.Features.SchemaDescriptions.SchemaDescription", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("contester.Features.Users.User", b =>
                {
                    b.Navigation("AuthoredContests");

                    b.Navigation("ContestApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
